{"name": "test_stepName_and_stepNumber", "status": "failed", "statusDetails": {"message": "AssertionError: Testcase Failed: Expected Activation_Send_NCP, ActualActivation_Send_NCP\nassert 'Activation_Send_NCP' == 'IG.Bs'\n  \n  - IG.Bs\n  + Activation_Send_NCP", "trace": "self = <test_HappyPath.TestHappyPath object at 0x00000223C7CA4A50>\n\n    def test_stepName_and_stepNumber(self):\n        self.url = self.URL\n        self.param ={\n            \"currentStepName\": self.STEP_NAME,\n            \"currentStepNumber\": self.STEP_NUMBER\n        }\n        self.headers={\n            \"Authorization\" : f\"Bearer {self.token}\"\n        }\n    \n        try:\n            #response = requests.get(self.url,params=self.param,headers=self.headers)\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n            #assert response.status_code == self.STATUS_CODE, f\"Expected: 200, Actual:{response.status_code}\"\n            RequestMain().validate_statuscode(response,self.STATUS_CODE)\n            #print(jsonresponse)\n    \n            assert jsonresponse[0][\"serialNumber\"] == self.EXPECTED_SERIAL, \"Serial Number doesn't match\"\n            assert jsonresponse[0][\"currentStepNumber\"] == self.STEP_NUMBER, f\"Expected {self.STEP_NUMBER}, Actual{jsonresponse[0][\"currentStepNumber\"]}\"\n>           assert jsonresponse[0][\"currentStepName\"] == \"IG.Bs\", f\"Expected {self.STEP_NAME}, Actual{jsonresponse[0][\"currentStepName\"]}\"\nE           AssertionError: Expected Activation_Send_NCP, ActualActivation_Send_NCP\nE           assert 'Activation_Send_NCP' == 'IG.Bs'\nE             \nE             - IG.Bs\nE             + Activation_Send_NCP\n\nMainFolder\\StepName_and_StepNumber\\Testcases\\test_HappyPath.py:34: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_HappyPath.TestHappyPath object at 0x00000223C7CA4A50>\n\n    def test_stepName_and_stepNumber(self):\n        self.url = self.URL\n        self.param ={\n            \"currentStepName\": self.STEP_NAME,\n            \"currentStepNumber\": self.STEP_NUMBER\n        }\n        self.headers={\n            \"Authorization\" : f\"Bearer {self.token}\"\n        }\n    \n        try:\n            #response = requests.get(self.url,params=self.param,headers=self.headers)\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n            #assert response.status_code == self.STATUS_CODE, f\"Expected: 200, Actual:{response.status_code}\"\n            RequestMain().validate_statuscode(response,self.STATUS_CODE)\n            #print(jsonresponse)\n    \n            assert jsonresponse[0][\"serialNumber\"] == self.EXPECTED_SERIAL, \"Serial Number doesn't match\"\n            assert jsonresponse[0][\"currentStepNumber\"] == self.STEP_NUMBER, f\"Expected {self.STEP_NUMBER}, Actual{jsonresponse[0][\"currentStepNumber\"]}\"\n            assert jsonresponse[0][\"currentStepName\"] == \"IG.Bs\", f\"Expected {self.STEP_NAME}, Actual{jsonresponse[0][\"currentStepName\"]}\"\n            print(f\" ID: {jsonresponse[0][\"id\"]}\")\n    \n        except Exception as e:\n>           raise AssertionError(f\"Testcase Failed: {e}\")\nE           AssertionError: Testcase Failed: Expected Activation_Send_NCP, ActualActivation_Send_NCP\nE           assert 'Activation_Send_NCP' == 'IG.Bs'\nE             \nE             - IG.Bs\nE             + Activation_Send_NCP\n\nMainFolder\\StepName_and_StepNumber\\Testcases\\test_HappyPath.py:38: AssertionError"}, "attachments": [{"name": "stdout", "source": "5329ba12-d915-4bd1-bb54-32101223bfa5-attachment.txt", "type": "text/plain"}], "start": 1759214539323, "stop": 1759214542696, "uuid": "fb1cc79b-97a3-4959-9d94-b2e58302df90", "historyId": "5dd2eb627872da34cc68d593ec9a32de", "testCaseId": "5dd2eb627872da34cc68d593ec9a32de", "fullName": "StepName_and_StepNumber.Testcases.test_HappyPath.TestHappyPath#test_stepName_and_stepNumber", "labels": [{"name": "parentSuite", "value": "StepName_and_StepNumber.Testcases"}, {"name": "suite", "value": "test_HappyPath"}, {"name": "subSuite", "value": "TestHappyPath"}, {"name": "host", "value": "DWILSON3-IN-LE1"}, {"name": "thread", "value": "7920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "StepName_and_StepNumber.Testcases.test_HappyPath"}], "titlePath": ["StepName_and_StepNumber", "Testcases", "test_HappyPath.py", "TestHappyPath"]}