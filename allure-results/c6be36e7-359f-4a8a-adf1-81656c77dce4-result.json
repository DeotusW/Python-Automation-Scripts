{"name": "test_stepName_and_stepNumber", "status": "failed", "statusDetails": {"message": "AssertionError: API returned an empty response", "trace": "self = <test_HappyPath.TestHappyPath object at 0x000001F826FBF750>\n\n    def test_stepName_and_stepNumber(self):\n        self.url = self.URL\n        self.param ={\n            \"currentStepName\": self.expected[\"currentStepName\"],\n            \"currentStepNumber\": self.expected[\"currentStepNumber\"]\n        }\n        self.headers={\n            \"Authorization\" : f\"Bearer {self.token}\"\n        }\n    \n        try:\n            #response = requests.get(self.url,params=self.param,headers=self.headers)\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n            #assert response.status_code == self.STATUS_CODE, f\"Expected: 200, Actual:{response.status_code}\"\n            RequestMain().validate_statuscode(response,self.STATUS_CODE)\n            #print(jsonresponse)\n    \n            #Assertion\n            for key,value in self.expected.items():\n>               assert jsonresponse[0][key] == value, f\"{jsonresponse[0][key]} Mismatch!, Expected {value}, Actual {jsonresponse[0][key]}\"\n                       ^^^^^^^^^^^^^^^\nE               IndexError: list index out of range\n\nMainFolder\\StepName_and_StepNumber\\Testcases\\test_HappyPath.py:37: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_HappyPath.TestHappyPath object at 0x000001F826FBF750>\n\n    def test_stepName_and_stepNumber(self):\n        self.url = self.URL\n        self.param ={\n            \"currentStepName\": self.expected[\"currentStepName\"],\n            \"currentStepNumber\": self.expected[\"currentStepNumber\"]\n        }\n        self.headers={\n            \"Authorization\" : f\"Bearer {self.token}\"\n        }\n    \n        try:\n            #response = requests.get(self.url,params=self.param,headers=self.headers)\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n            #assert response.status_code == self.STATUS_CODE, f\"Expected: 200, Actual:{response.status_code}\"\n            RequestMain().validate_statuscode(response,self.STATUS_CODE)\n            #print(jsonresponse)\n    \n            #Assertion\n            for key,value in self.expected.items():\n                assert jsonresponse[0][key] == value, f\"{jsonresponse[0][key]} Mismatch!, Expected {value}, Actual {jsonresponse[0][key]}\"\n    \n            print(f\" ID: {jsonresponse[0][\"id\"]}\")\n    \n        except IndexError:\n>           raise AssertionError(\"API returned an empty response\")\nE           AssertionError: API returned an empty response\n\nMainFolder\\StepName_and_StepNumber\\Testcases\\test_HappyPath.py:42: AssertionError"}, "attachments": [{"name": "stdout", "source": "bbf7de17-c82d-488e-bf95-9882562e5641-attachment.txt", "type": "text/plain"}], "start": 1759219387586, "stop": 1759219392028, "uuid": "069b8e2d-645f-442d-87fd-c347f3d1303f", "historyId": "5dd2eb627872da34cc68d593ec9a32de", "testCaseId": "5dd2eb627872da34cc68d593ec9a32de", "fullName": "StepName_and_StepNumber.Testcases.test_HappyPath.TestHappyPath#test_stepName_and_stepNumber", "labels": [{"name": "parentSuite", "value": "StepName_and_StepNumber.Testcases"}, {"name": "suite", "value": "test_HappyPath"}, {"name": "subSuite", "value": "TestHappyPath"}, {"name": "host", "value": "DWILSON3-IN-LE1"}, {"name": "thread", "value": "25860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "StepName_and_StepNumber.Testcases.test_HappyPath"}], "titlePath": ["StepName_and_StepNumber", "Testcases", "test_HappyPath.py", "TestHappyPath"]}