{"name": "test_hardware_type", "status": "failed", "statusDetails": {"message": "AssertionError: Testcase Failed: Expected: 200, Actual:403", "trace": "self = <test_HappyPath_HT.TestHappyPathHT object at 0x000001F094A43750>\n\n    def test_hardware_type(self):\n        self.url = self.URL\n        self.param = {\"hardwareType\": self.expected[\"hardwareType\"]}\n        self.headers = {\"Authorization\": f\"Bearer {self.token}\"}\n        try:\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n>           RequestMain().validate_statuscode(response,self.STATUSCODE)\n\nMainFolder\\Testcases\\hardwareType\\test_HappyPath_HT.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [403]>, ExpectedStsCode = 200\n\n    @staticmethod\n    def validate_statuscode(response=None,ExpectedStsCode=None):\n>       assert response.status_code == ExpectedStsCode, f\"Expected: {ExpectedStsCode}, Actual:{response.status_code}\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Expected: 200, Actual:403\n\nMainFolder\\RequestMethods\\requestMethods.py:28: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_HappyPath_HT.TestHappyPathHT object at 0x000001F094A43750>\n\n    def test_hardware_type(self):\n        self.url = self.URL\n        self.param = {\"hardwareType\": self.expected[\"hardwareType\"]}\n        self.headers = {\"Authorization\": f\"Bearer {self.token}\"}\n        try:\n            response = RequestMain().get_method(self.url,params=self.param,headers=self.headers)\n            jsonresponse = response.json()\n            RequestMain().validate_statuscode(response,self.STATUSCODE)\n    \n            if not jsonresponse:\n                raise AssertionError(\"JSON Response is Empty\")\n    \n            print(f\" ID: {jsonresponse[0][\"id\"]}\")\n    \n            #Assertion Here\n            for key,value in self.expected.items():\n                assert jsonresponse[2][key] == value, f\"{jsonresponse[2][key]} Mismatch! - Expected: {value}, Actual: {jsonresponse[2][key]}\"\n    \n        except Exception as e:\n>           raise AssertionError(f\"Testcase Failed: {e}\")\nE           AssertionError: Testcase Failed: Expected: 200, Actual:403\n\nMainFolder\\Testcases\\hardwareType\\test_HappyPath_HT.py:32: AssertionError"}, "attachments": [{"name": "stdout", "source": "afeb03e9-0b01-475d-b12b-26e93da148b7-attachment.txt", "type": "text/plain"}], "start": 1760337730604, "stop": 1760337731581, "uuid": "a4780069-a2d5-4808-983f-07c8693f4784", "historyId": "222b2f4fc0681162e7d8469303e027da", "testCaseId": "222b2f4fc0681162e7d8469303e027da", "fullName": "Testcases.hardwareType.test_HappyPath_HT.TestHappyPathHT#test_hardware_type", "labels": [{"name": "parentSuite", "value": "Testcases.hardwareType"}, {"name": "suite", "value": "test_HappyPath_HT"}, {"name": "subSuite", "value": "TestHappyPathHT"}, {"name": "host", "value": "DWILSON3-IN-LE1"}, {"name": "thread", "value": "24516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.hardwareType.test_HappyPath_HT"}], "titlePath": ["Testcases", "hardwareType", "test_HappyPath_HT.py", "TestHappyPathHT"]}