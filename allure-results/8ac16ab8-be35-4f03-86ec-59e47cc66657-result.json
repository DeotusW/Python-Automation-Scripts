{"name": "test_stepName_and_stepNumber", "status": "failed", "statusDetails": {"message": "AssertionError: Testcase Failed: 0411-000014 Mismatch! - Expected: 0412-000105, Actual: 0411-000014", "trace": "self = <test_HappyPath.TestHappyPathSNSN object at 0x00000204A619F750>\n\n    def HappyPathTest(self):\n        try:\n            response = self.get_json_response()\n            jsonResponse = response.json()\n            if not jsonResponse:\n                raise AssertionError(\"JSON Response is Empty\")\n>           self.validate_json_response(response,jsonResponse)\n\nMainFolder\\BaseFolder\\BaseHappyPath.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_HappyPath.TestHappyPathSNSN object at 0x00000204A619F750>\nresponse = <Response [200]>\njsonResponse = [{'cancelRequest': False, 'created': '2025-10-06T19:34:42.636068Z', 'currentStepName': 'Activation_Send_NCP', 'current... 'created': '2025-09-26T21:08:03.566994Z', 'currentStepName': 'Activation_Send_NCP', 'currentStepNumber': 6, ...}, ...]\n\n    def validate_json_response(self,response,jsonResponse):\n        RequestMain().validate_statuscode(response,self.STATUSCODE)\n        if not jsonResponse:\n            raise AssertionError(\"API returned an empty response\")\n        for key,value in self.EXPECTED.items():\n>           assert jsonResponse[2][key] == value, f\"{jsonResponse[2][key]} Mismatch! - Expected: {value}, Actual: {jsonResponse[2][key]}\"\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: 0411-000014 Mismatch! - Expected: 0412-000105, Actual: 0411-000014\n\nMainFolder\\BaseFolder\\BaseHappyPath.py:22: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_HappyPath.TestHappyPathSNSN object at 0x00000204A619F750>\n\n    def test_stepName_and_stepNumber(self):\n>       self.HappyPathTest()\n\nMainFolder\\Testcases\\StepName_and_StepNumber\\test_HappyPath.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_HappyPath.TestHappyPathSNSN object at 0x00000204A619F750>\n\n    def HappyPathTest(self):\n        try:\n            response = self.get_json_response()\n            jsonResponse = response.json()\n            if not jsonResponse:\n                raise AssertionError(\"JSON Response is Empty\")\n            self.validate_json_response(response,jsonResponse)\n        except Exception as e:\n>           raise AssertionError(f\"Testcase Failed: {e}\")\nE           AssertionError: Testcase Failed: 0411-000014 Mismatch! - Expected: 0412-000105, Actual: 0411-000014\n\nMainFolder\\BaseFolder\\BaseHappyPath.py:32: AssertionError"}, "attachments": [{"name": "stdout", "source": "8d6e351f-35c4-47ee-85b0-a28485d57275-attachment.txt", "type": "text/plain"}], "start": 1760426706316, "stop": 1760426718937, "uuid": "b38631bb-aa1e-48da-923a-a28facf08602", "historyId": "659069422a32a5199605d24f342cd097", "testCaseId": "659069422a32a5199605d24f342cd097", "fullName": "Testcases.StepName_and_StepNumber.test_HappyPath.TestHappyPathSNSN#test_stepName_and_stepNumber", "labels": [{"name": "parentSuite", "value": "Testcases.StepName_and_StepNumber"}, {"name": "suite", "value": "test_HappyPath"}, {"name": "subSuite", "value": "TestHappyPathSNSN"}, {"name": "host", "value": "DWILSON3-IN-LE1"}, {"name": "thread", "value": "924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.StepName_and_StepNumber.test_HappyPath"}], "titlePath": ["Testcases", "StepName_and_StepNumber", "test_HappyPath.py", "TestHappyPathSNSN"]}