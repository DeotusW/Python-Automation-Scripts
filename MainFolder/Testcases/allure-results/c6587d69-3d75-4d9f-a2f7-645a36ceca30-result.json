{"name": "test_Hardware_Type", "status": "failed", "statusDetails": {"message": "AssertionError: Testcase Failed: 000694 Mismatch! - Expected: 0411-000014, Actual: 000694", "trace": "self = <test_HappyPath_HT.TestHappyPathHT object at 0x000001A612A60190>\n\n    def HappyPathTest(self):\n        try:\n            response = self.get_json_response()\n            jsonResponse = response.json()\n            if not jsonResponse:\n                raise AssertionError(\"JSON Response is Empty\")\n>           self.validate_json_response(response,jsonResponse,self.INDEX)\n\n..\\BaseFolder\\BaseHappyPath.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_HappyPath_HT.TestHappyPathHT object at 0x000001A612A60190>, response = <Response [200]>\njsonResponse = [{'cancelRequest': None, 'created': '2025-10-15T20:41:35.684664Z', 'currentStepName': 'ACM_GW03_FUSE_VERIFICATION', 'c...'created': '2025-10-15T16:15:36.567216Z', 'currentStepName': 'Deactivation_Appareo', 'currentStepNumber': 6, ...}, ...]\nINDEX = 1\n\n    def validate_json_response(self,response,jsonResponse,INDEX):\n        RequestMain().validate_statuscode(response,self.STATUSCODE)\n        if not jsonResponse:\n            raise AssertionError(\"API returned an empty response\")\n        for key,value in self.EXPECTED.items():\n>           assert jsonResponse[INDEX][key] == value, f\"{jsonResponse[INDEX][key]} Mismatch! - Expected: {value}, Actual: {jsonResponse[INDEX][key]}\"\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AssertionError: 000694 Mismatch! - Expected: 0411-000014, Actual: 000694\n\n..\\BaseFolder\\BaseHappyPath.py:23: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_HappyPath_HT.TestHappyPathHT object at 0x000001A612A60190>\n\n    def test_Hardware_Type(self):\n>       self.HappyPathTest()\n\nhardwareType\\test_HappyPath_HT.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_HappyPath_HT.TestHappyPathHT object at 0x000001A612A60190>\n\n    def HappyPathTest(self):\n        try:\n            response = self.get_json_response()\n            jsonResponse = response.json()\n            if not jsonResponse:\n                raise AssertionError(\"JSON Response is Empty\")\n            self.validate_json_response(response,jsonResponse,self.INDEX)\n            print(f\" ID: {jsonResponse[self.INDEX]['id']}\")\n        except Exception as e:\n>           raise AssertionError(f\"Testcase Failed: {e}\")\nE           AssertionError: Testcase Failed: 000694 Mismatch! - Expected: 0411-000014, Actual: 000694\n\n..\\BaseFolder\\BaseHappyPath.py:34: AssertionError"}, "attachments": [{"name": "stdout", "source": "6aeca3c5-d62e-4177-b0f5-843f5f457438-attachment.txt", "type": "text/plain"}], "start": 1760603158633, "stop": 1760603162412, "uuid": "db1009a1-02eb-4c9d-81c8-9fa559f281b8", "historyId": "f815ee719006b1ddc0ffa9ca2a815a23", "testCaseId": "f815ee719006b1ddc0ffa9ca2a815a23", "fullName": "Testcases.hardwareType.test_HappyPath_HT.TestHappyPathHT#test_Hardware_Type", "labels": [{"name": "parentSuite", "value": "Testcases.hardwareType"}, {"name": "suite", "value": "test_HappyPath_HT"}, {"name": "subSuite", "value": "TestHappyPathHT"}, {"name": "host", "value": "DWILSON3-IN-LE1"}, {"name": "thread", "value": "6544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.hardwareType.test_HappyPath_HT"}], "titlePath": ["Testcases", "hardwareType", "test_HappyPath_HT.py", "TestHappyPathHT"]}